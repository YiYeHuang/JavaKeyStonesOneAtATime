package leetcode.string;

import leetcode.tag.level.Easy;
import leetcode.tag.type.StringTag;

/*
1332. Remove Palindromic Subsequences

Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0

 */

@Easy
@StringTag
public class RemovePalindromicSubsequences {

    /**
     * - only contains a b
     * - remove sub sequences not sub string
     */
    public int removePalindromeSub(String s) {
        if (s==null || s.length() == 0) return 0;

        if (isPalindrome(s)) {
            return 1;
        } else {
            return 2;
        }
    }

    private static boolean isPalindrome(String input)
    {
        int left = 0;
        int right = input.length() - 1;
        while (left <= right)
        {
            if (input.charAt(left) != input.charAt(right)) return false;
            ++left;
            --right;
        }
        return true;
    }
}
